// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Branchs, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Branchs = (function(superClass) {
    extend(Branchs, superClass);

    function Branchs() {
      this.deleteMember = bind(this.deleteMember, this);
      this.members = bind(this.members, this);
      this.protectedBranch = bind(this.protectedBranch, this);
      this.protectedBranch = bind(this.protectedBranch, this);
      this.addMember = bind(this.addMember, this);
      this.del = bind(this.del, this);
      this.create = bind(this.create, this);
      this.listBranches = bind(this.listBranches, this);
      this["default"] = bind(this["default"], this);
      return Branchs.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method            : post
     summary         : default
     description    : 设置默认分支
     path            : user,project
     query            : branch_name
     */

    Branchs.prototype["default"] = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Branchs::default()");
      return this.post("user/" + user + "/project/" + project + "/git/branch/default", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : listBranches
     description    : 分页显示分支列表
     path            : user,project
     query            : page,pageSize
     */

    Branchs.prototype.listBranches = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Branchs::listBranches()");
      return this.get("user/" + user + "/project/" + project + "/git/branches", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : create
     description    : 新建分支
     path            : user,project
     query            : branch_name,start_point
     */

    Branchs.prototype.create = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Branchs::create()");
      return this.post("user/" + user + "/project/" + project + "/git/branches/create", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : del
     description    : 删除分支
     path            : user,project
     query            : branch_name
     */

    Branchs.prototype.del = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Branchs::del()");
      return this.post("user/" + user + "/project/" + project + "/git/branches/delete", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : addMember
     description    : 添加保护分支成员
     path            : user,project
     query            : branch_name,target_global_key
     */

    Branchs.prototype.addMember = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Branchs::addMember()");
      return this.post("user/" + user + "/project/" + project + "/git/branches/protected_branch/add_member", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : protectedBranch
     description    : 取消保护分支
     path            : user,project
     query            : branch_name
     */

    Branchs.prototype.protectedBranch = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Branchs::protectedBranch()");
      return this.post("user/" + user + "/project/" + project + "/git/branches/protected_branch/disable", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : protectedBranch
     description    : 设置保护分支
     path            : user,project
     query            : branch_name
     */

    Branchs.prototype.protectedBranch = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Branchs::protectedBranch()");
      return this.post("user/" + user + "/project/" + project + "/git/branches/protected_branch/enable", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : members
     description    : 列出保护分支中的成员
     path            : user,project
     query            : branch_name
     */

    Branchs.prototype.members = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Branchs::members()");
      return this.get("user/" + user + "/project/" + project + "/git/branches/protected_branch/members", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : deleteMember
     description    : 删除保护分支成员
     path            : user,project
     query            : branch_name,target_global_key
     */

    Branchs.prototype.deleteMember = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Branchs::deleteMember()");
      return this.post("user/" + user + "/project/" + project + "/git/branches/protected_branch/remove_member", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Branchs;

  })(BaseModel);

  module.exports = function(client) {
    return new Branchs(client);
  };

}).call(this);
