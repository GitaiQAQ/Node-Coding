// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, ProjectTopics, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  ProjectTopics = (function(superClass) {
    extend(ProjectTopics, superClass);

    function ProjectTopics() {
      this.watchers = bind(this.watchers, this);
      this.watch = bind(this.watch, this);
      this.operateTopicLabel = bind(this.operateTopicLabel, this);
      this.deleteTopicLabel = bind(this.deleteTopicLabel, this);
      this.addTopicLabel = bind(this.addTopicLabel, this);
      this.comments = bind(this.comments, this);
      this.del = bind(this.del, this);
      this.update = bind(this.update, this);
      this.detail = bind(this.detail, this);
      this.watchedProjectTopicList = bind(this.watchedProjectTopicList, this);
      this.list = bind(this.list, this);
      this.count = bind(this.count, this);
      this.getProjectTopicByLabel = bind(this.getProjectTopicByLabel, this);
      this.count = bind(this.count, this);
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      return ProjectTopics.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method            : get
     summary         : list
     description    : 项目讨论列表
     path            : user,project
     query            : orderBy,page,pageSize
     */

    ProjectTopics.prototype.list = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::list()");
      return this.get("/api/user/" + user + "/project/" + project + "/topics", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : create
     description    : 创建讨论/发表评论
     path            : user,project
     query            : parent,title,content,label,type
     */

    ProjectTopics.prototype.create = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::create()");
      return this.post("/api/user/" + user + "/project/" + project + "/topics", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : count
     description    : 所有讨论的个数和我的讨论的个数
     path            : user,project
     */

    ProjectTopics.prototype.count = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::count()");
      return this.get("/api/user/" + user + "/project/" + project + "/topics/count", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : getProjectTopicByLabel
     description    : 通过标签获得讨论列表
     path            : user,project,id
     query            : orderBy,page,pageSize
     */

    ProjectTopics.prototype.getProjectTopicByLabel = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::getProjectTopicByLabel()");
      return this.get("/api/user/" + user + "/project/" + project + "/topics/label/" + id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : count
     description    : 所有讨论的个数和我的讨论的个数
     path            : user,project
     */

    ProjectTopics.prototype.count = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::count()");
      return this.get("/api/user/" + user + "/project/" + project + "/topics/labels/my", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : list
     description    : 我的讨论
     path            : user,project
     query            : orderBy,page,pageSize
     */

    ProjectTopics.prototype.list = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::list()");
      return this.get("/api/user/" + user + "/project/" + project + "/topics/mine", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : watchedProjectTopicList
     description    : 获取我关注的讨论列表
     path            : user,project
     query            : orderBy,page,pageSize
     */

    ProjectTopics.prototype.watchedProjectTopicList = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::watchedProjectTopicList()");
      return this.get("/api/user/" + user + "/project/" + project + "/topics/watching", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : detail
     description    : 讨论详情
     path            : user,project,id
     query            : type,toc
     */

    ProjectTopics.prototype.detail = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::detail()");
      return this.get("/api/user/" + user + "/project/" + project + "/topics/" + id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : update
     description    : 更新讨论
     path            : user,project,id
     query            : topic_id,title,content,label
     */

    ProjectTopics.prototype.update = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::update()");
      return this.put("/api/user/" + user + "/project/" + project + "/topics/" + id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : del
     description    : 删除讨论/删除讨论评论
     path            : user,project,id
     */

    ProjectTopics.prototype.del = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::del()");
      return this["delete"]("/api/user/" + user + "/project/" + project + "/topics/" + id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : comments
     description    : 讨论评论列表
     path            : user,project,id
     query            : page,pageSize,type
     */

    ProjectTopics.prototype.comments = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::comments()");
      return this.get("/api/user/" + user + "/project/" + project + "/topics/" + id + "/comments", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : addTopicLabel
     description    : 讨论添加标签
     path            : user,project,id,labelId
     */

    ProjectTopics.prototype.addTopicLabel = function(user, project, id, labelId, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::addTopicLabel()");
      return this.post("/api/user/" + user + "/project/" + project + "/topics/" + id + "/label/" + labelId, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : deleteTopicLabel
     description    : 删除讨论标签
     path            : user,project,id,labelId
     */

    ProjectTopics.prototype.deleteTopicLabel = function(user, project, id, labelId, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::deleteTopicLabel()");
      return this["delete"]("/api/user/" + user + "/project/" + project + "/topics/" + id + "/label/" + labelId, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : operateTopicLabel
     description    : 批量操作讨论标签
     path            : user,project,id
     query            : labelIdStrs
     */

    ProjectTopics.prototype.operateTopicLabel = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::operateTopicLabel()");
      return this.post("/api/user/" + user + "/project/" + project + "/topics/" + id + "/labels", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : watch
     description    : 关注讨论
     path            : user,project,id
     */

    ProjectTopics.prototype.watch = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::watch()");
      return this.post("/api/user/" + user + "/project/" + project + "/topics/" + id + "/watch", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : watchers
     description    : 获取关注该讨论的用户
     path            : user,project,id
     query            : page,pageSize
     */

    ProjectTopics.prototype.watchers = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectTopics::watchers()");
      return this.get("/api/user/" + user + "/project/" + project + "/topics/" + id + "/watchers", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return ProjectTopics;

  })(BaseModel);

  module.exports = function(client) {
    return new ProjectTopics(client);
  };

}).call(this);
