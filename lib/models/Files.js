// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Files, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Files = (function(superClass) {
    extend(Files, superClass);

    function Files() {
      this.count = bind(this.count, this);
      this.folders = bind(this.folders, this);
      this.folders = bind(this.folders, this);
      this.files = bind(this.files, this);
      this.renameFolder = bind(this.renameFolder, this);
      this.move = bind(this.move, this);
      this.mkdir = bind(this.mkdir, this);
      this.mkdir = bind(this.mkdir, this);
      this.history = bind(this.history, this);
      this.create = bind(this.create, this);
      this.updateFileRemark = bind(this.updateFileRemark, this);
      this.preview = bind(this.preview, this);
      this.view = bind(this.view, this);
      this.edit = bind(this.edit, this);
      this.download = bind(this.download, this);
      this.download = bind(this.download, this);
      this.upload = bind(this.upload, this);
      this.download = bind(this.download, this);
      this.history = bind(this.history, this);
      this.view = bind(this.view, this);
      this.uploadNewVersion = bind(this.uploadNewVersion, this);
      this.checkExisted = bind(this.checkExisted, this);
      return Files.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method            : get
     summary         : checkExisted
     description    : 检查目录下是否有同名的文件
     path            : user,project,dir
     body            : names
     */

    Files.prototype.checkExisted = function(user, project, dir, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::checkExisted()");
      return this.get("user/" + user + "/project/" + project + "/dir/" + dir + "/files/existed", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : uploadNewVersion
     description    : 上传文件新版本
     path            : user,project
     */

    Files.prototype.uploadNewVersion = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::uploadNewVersion()");
      return this.post("user/" + user + "/project/" + project + "/file/history/upload", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : view
     description    : 删除文件
     path            : user,project
     body            : fileIds
     */

    Files.prototype.view = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::view()");
      return this["delete"]("user/" + user + "/project/" + project + "/files", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : history
     description    : 删除文件历史
     path            : user,project,id
     */

    Files.prototype.history = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::history()");
      return this["delete"]("user/" + user + "/project/" + project + "/files/histories/" + id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : download
     description    : 下载历史文件版本
     path            : user,project,id
     */

    Files.prototype.download = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::download()");
      return this.get("user/" + user + "/project/" + project + "/files/histories/" + id + "/download", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : upload
     description    : 上传私有项目的图片
     path            : user,project
     */

    Files.prototype.upload = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::upload()");
      return this.post("user/" + user + "/project/" + project + "/files/upload", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : download
     description    : 文件下载
     path            : user,project,fileId
     */

    Files.prototype.download = function(user, project, fileId, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::download()");
      return this.get("user/" + user + "/project/" + project + "/files/" + fileId + "/download", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : download
     description    : 文件下载URL
     path            : user,project,fileId
     */

    Files.prototype.download = function(user, project, fileId, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::download()");
      return this.get("user/" + user + "/project/" + project + "/files/" + fileId + "/download/url", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : edit
     description    : 编辑文件
     path            : user,project,fileId
     query            : name,content,fileId
     */

    Files.prototype.edit = function(user, project, fileId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::edit()");
      return this.post("user/" + user + "/project/" + project + "/files/" + fileId + "/edit", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : view
     description    : 查看文件
     path            : user,project,fileId
     query            : type,width,height,flag
     */

    Files.prototype.view = function(user, project, fileId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::view()");
      return this.get("user/" + user + "/project/" + project + "/files/" + fileId + "/view", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : preview
     description    : 图片预览
     path            : user,project,fileId
     query            : type,width,height
     */

    Files.prototype.preview = function(user, project, fileId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::preview()");
      return this.get("user/" + user + "/project/" + project + "/files/" + fileId + "/view/image", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : updateFileRemark
     description    : 修改历史版本备注
     path            : user,project,file_id,history_id
     query            : remark
     */

    Files.prototype.updateFileRemark = function(user, project, file_id, history_id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::updateFileRemark()");
      return this.post("user/" + user + "/project/" + project + "/files/" + file_id + "/histories/" + history_id + "/remark", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : create
     description    : 创建文件
     path            : user,project,folderId
     query            : projectFile.deleted_at,projectFile.projects_id,projectFile.files_id,projectFile.comments,projectFile.id,folder.owner_id,folder.parent_id,folder.created_at,folder.updated_at,folder.type,folder.size,folder.name,folder.storage_type,folder.storage_key,folder.history_id,folder.id,name,content,folderId
     */

    Files.prototype.create = function(user, project, folderId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::create()");
      return this.post("user/" + user + "/project/" + project + "/files/" + folderId + "/files", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : history
     description    : 文件历史
     path            : user,project,id
     query            : type,width,height
     */

    Files.prototype.history = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::history()");
      return this.get("user/" + user + "/project/" + project + "/files/" + id + "/histories", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : mkdir
     description    : 创建文件夹
     path            : user,project
     query            : name,parentId
     */

    Files.prototype.mkdir = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::mkdir()");
      return this.post("user/" + user + "/project/" + project + "/folder", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : mkdir
     description    : 删除文件夹
     path            : user,project
     */

    Files.prototype.mkdir = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::mkdir()");
      return this["delete"]("user/" + user + "/project/" + project + "/folder", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : move
     description    : 移动文件
     path            : user,project,dirId
     query            : fileId
     */

    Files.prototype.move = function(user, project, dirId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::move()");
      return this.put("user/" + user + "/project/" + project + "/folder/" + dirId + "/move", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : renameFolder
     description    : 重命名文件夹
     path            : user,project,dir
     query            : name
     */

    Files.prototype.renameFolder = function(user, project, dir, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::renameFolder()");
      return this.put("user/" + user + "/project/" + project + "/folder/" + dir, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : files
     description    : 列出某目录下的文件
     path            : user,project,dir
     query            : type,width,height,page,pageSize
     */

    Files.prototype.files = function(user, project, dir, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::files()");
      return this.get("user/" + user + "/project/" + project + "/folder/" + dir + "/files", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : folders
     description    : 列出所有一级目录
     path            : user,project
     query            : page,pageSize
     */

    Files.prototype.folders = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::folders()");
      return this.get("user/" + user + "/project/" + project + "/folders", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : folders
     description    : 列出所有目录
     path            : user,project
     query            : page,pageSize
     */

    Files.prototype.folders = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::folders()");
      return this.get("user/" + user + "/project/" + project + "/folders/all", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : count
     description    : 获取文件夹的文件数
     path            : user,project
     */

    Files.prototype.count = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::count()");
      return this.get("user/" + user + "/project/" + project + "/folders/file_count/all", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Files;

  })(BaseModel);

  module.exports = function(client) {
    return new Files(client);
  };

}).call(this);
