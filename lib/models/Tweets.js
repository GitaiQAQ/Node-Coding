// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Tweets, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Tweets = (function(superClass) {
    extend(Tweets, superClass);

    function Tweets() {
      this.publicTweets = bind(this.publicTweets, this);
      this.unlike = bind(this.unlike, this);
      this.likeTweetList = bind(this.likeTweetList, this);
      this.like = bind(this.like, this);
      this.del = bind(this.del, this);
      this.comment = bind(this.comment, this);
      this.comment = bind(this.comment, this);
      this.comment = bind(this.comment, this);
      this.detail = bind(this.detail, this);
      this.userPublic = bind(this.userPublic, this);
      this.list = bind(this.list, this);
      this.lastTweetList = bind(this.lastTweetList, this);
      this.image = bind(this.image, this);
      this.comment = bind(this.comment, this);
      this.bestUser = bind(this.bestUser, this);
      this.create = bind(this.create, this);
      return Tweets.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method            : post
     summary         : create
     description    : 发送冒泡
     query            : device,location,coord,address,content
     */

    Tweets.prototype.create = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::create()");
      return this.post("/api/social/tweet", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : bestUser
     description    : 热门用户
     */

    Tweets.prototype.bestUser = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::bestUser()");
      return this.get("/api/social/tweet/best_user", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : comment
     description    : 获取某个评论
     path            : id
     */

    Tweets.prototype.comment = function(id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::comment()");
      return this.get("/api/social/tweet/comment/" + id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : image
     description    : 冒泡插入图片
     */

    Tweets.prototype.image = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::image()");
      return this.post("/api/social/tweet/insert_image", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : lastTweetList
     description    : 查询last_id以后的最新冒泡
     query            : default_like_count,last_id
     */

    Tweets.prototype.lastTweetList = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::lastTweetList()");
      return this.get("/api/social/tweet/last", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : list
     description    : 冒泡列表
     query            : sort,last_id,default_like_count,filter
     */

    Tweets.prototype.list = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::list()");
      return this.get("/api/social/tweet/public_tweets", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : userPublic
     description    : 用户冒泡列表
     query            : last_id,user_id,user,type,default_like_count
     */

    Tweets.prototype.userPublic = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::userPublic()");
      return this.get("/api/social/tweet/user_public", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : detail
     description    : 获取冒泡详情
     path            : user,tweet_id
     query            : default_like_count
     */

    Tweets.prototype.detail = function(user, tweet_id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::detail()");
      return this.get("/api/social/tweet/" + user + "/" + tweet_id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : comment
     description    : 冒泡评论
     path            : id
     query            : content,afterFilter
     */

    Tweets.prototype.comment = function(id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::comment()");
      return this.post("/api/social/tweet/" + id + "/comment", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : comment
     description    : 删除冒泡评论
     path            : id,comment_id
     */

    Tweets.prototype.comment = function(id, comment_id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::comment()");
      return this["delete"]("/api/social/tweet/" + id + "/comment/" + comment_id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : comment
     description    : 获取冒泡评论列表
     path            : id
     query            : page,pageSize
     */

    Tweets.prototype.comment = function(id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::comment()");
      return this.get("/api/social/tweet/" + id + "/comments", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : del
     description    : 删除冒泡
     path            : tweet_id
     */

    Tweets.prototype.del = function(tweet_id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::del()");
      return this["delete"]("/api/social/tweet/" + tweet_id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : like
     description    : 冒泡点赞
     path            : tweet_id
     */

    Tweets.prototype.like = function(tweet_id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::like()");
      return this.post("/api/social/tweet/" + tweet_id + "/like", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : likeTweetList
     description    : 赞过的冒泡列表
     path            : tweet_id
     query            : page,pageSize
     */

    Tweets.prototype.likeTweetList = function(tweet_id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::likeTweetList()");
      return this.get("/api/social/tweet/" + tweet_id + "/tweetlike", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : unlike
     description    : 冒泡取消点赞
     path            : tweet_id
     */

    Tweets.prototype.unlike = function(tweet_id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::unlike()");
      return this.post("/api/social/tweet/" + tweet_id + "/unlike", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : publicTweets
     description    : 冒泡广场列表
     query            : sort,last_id,default_like_count,filter
     */

    Tweets.prototype.publicTweets = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tweets::publicTweets()");
      return this.get("/api/tweet/public_tweets", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Tweets;

  })(BaseModel);

  module.exports = function(client) {
    return new Tweets(client);
  };

}).call(this);
