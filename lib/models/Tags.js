// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Tags, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Tags = (function(superClass) {
    extend(Tags, superClass);

    function Tags() {
      this.del = bind(this.del, this);
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      return Tags.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method            : get
     summary         : list
     description    : 标签列表
     path            : user,project
     query            : page,pageSize
     */

    Tags.prototype.list = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tags::list()");
      return this.get("user/" + user + "/project/" + project + "/git/tags", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : create
     description    : 创建标签
     path            : user,project
     query            : tag_name,tag_point,message
     */

    Tags.prototype.create = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tags::create()");
      return this.post("user/" + user + "/project/" + project + "/git/tags/create", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : del
     description    : 删除标签
     path            : user,project
     query            : tag_name
     */

    Tags.prototype.del = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tags::del()");
      return this.post("user/" + user + "/project/" + project + "/git/tags/delete", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Tags;

  })(BaseModel);

  module.exports = function(client) {
    return new Tags(client);
  };

}).call(this);
