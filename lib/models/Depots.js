// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Depots, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Depots = (function(superClass) {
    extend(Depots, superClass);

    function Depots() {
      return Depots.__super__.constructor.apply(this, arguments);
    }

    return Depots;

  })(BaseModel);

  ({

    /*
    
     method			: get
     summary 		: get
     description	: 获取仓库信息
     path			: user,project
     */
    get: (function(_this) {
      return function(user, project, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::get()");
        return _this.get("user/" + user + "/project/" + project + "/git", function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: fork
     description	: fork
     path			: user,project
     */
    fork: (function(_this) {
      return function(user, project, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::fork()");
        return _this.post("user/" + user + "/project/" + project + "/git/fork", function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: forkList
     description	: 项目被fork的列表
     path			: user,project
     */
    forkList: (function(_this) {
      return function(user, project, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::forkList()");
        return _this.get("user/" + user + "/project/" + project + "/git/forks", function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: createWebhook
     description	: 创建 webhook
     path			: user,project
     query			: hook_url,token,type_push,type_mr_pr,type_topic,type_member,type_comment,type_document,type_watch,type_star,type_task
     */
    createWebhook: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::createWebhook()");
        return _this.post("user/" + user + "/project/" + project + "/git/hook", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: getWebhook
     description	: 获取 webhook
     path			: user,project,id
     */
    getWebhook: (function(_this) {
      return function(user, project, id, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::getWebhook()");
        return _this.get("user/" + user + "/project/" + project + "/git/hook/" + id, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: put
     summary 		: updateWebhook
     description	: 编辑 webhook
     path			: user,project,id
     query			: hook_url,token,type_push,type_mr_pr,type_topic,type_member,type_comment,type_document,type_watch,type_star,type_task
     */
    updateWebhook: (function(_this) {
      return function(user, project, id, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::updateWebhook()");
        return _this.put("user/" + user + "/project/" + project + "/git/hook/" + id, params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: delete
     summary 		: deleteWebhook
     description	: 删除 webhook
     path			: user,project,id
     */
    deleteWebhook: (function(_this) {
      return function(user, project, id, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::deleteWebhook()");
        return _this["delete"]("user/" + user + "/project/" + project + "/git/hook/" + id, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: list
     description	: 列出项目设置的 webhook
     path			: user,project
     */
    list: (function(_this) {
      return function(user, project, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::list()");
        return _this.get("user/" + user + "/project/" + project + "/git/hooks", function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: importRepo
     description	: 导入仓库
     path			: user,project
     query			: origin_url,vcs_type
     */
    importRepo: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::importRepo()");
        return _this.get("user/" + user + "/project/" + project + "/git/import", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: importRepo
     description	: 导入仓库
     path			: user,project
     query			: origin_url,vcs_type
     */
    importRepo: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::importRepo()");
        return _this.post("user/" + user + "/project/" + project + "/git/import", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: initDepot
     description	: 初始化仓库
     path			: user,project
     query			: type,gitReadmeEnabled,gitIgnore,gitLicense,importFrom,vcsType
     */
    initDepot: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Depots::initDepot()");
        return _this.post("user/" + user + "/project/" + project + "/git/init", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this)
  });

  module.exports = function(client) {
    return new Depots(client);
  };

}).call(this);
