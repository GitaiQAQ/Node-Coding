// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Depots, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Depots = (function(superClass) {
    extend(Depots, superClass);

    function Depots() {
      this.initDepot = bind(this.initDepot, this);
      this.importRepo = bind(this.importRepo, this);
      this.importRepo = bind(this.importRepo, this);
      this.list = bind(this.list, this);
      this.deleteWebhook = bind(this.deleteWebhook, this);
      this.updateWebhook = bind(this.updateWebhook, this);
      this.getWebhook = bind(this.getWebhook, this);
      this.createWebhook = bind(this.createWebhook, this);
      this.forkList = bind(this.forkList, this);
      this.fork = bind(this.fork, this);
      this.get = bind(this.get, this);
      return Depots.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method            : get
     summary         : get
     description    : 获取仓库信息
     path            : user,project
     */

    Depots.prototype.get = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::get()");
      return this.get("user/" + user + "/project/" + project + "/git", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : fork
     description    : fork
     path            : user,project
     */

    Depots.prototype.fork = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::fork()");
      return this.post("user/" + user + "/project/" + project + "/git/fork", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : forkList
     description    : 项目被fork的列表
     path            : user,project
     */

    Depots.prototype.forkList = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::forkList()");
      return this.get("user/" + user + "/project/" + project + "/git/forks", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : createWebhook
     description    : 创建 webhook
     path            : user,project
     query            : hook_url,token,type_push,type_mr_pr,type_topic,type_member,type_comment,type_document,type_watch,type_star,type_task
     */

    Depots.prototype.createWebhook = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::createWebhook()");
      return this.post("user/" + user + "/project/" + project + "/git/hook", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : getWebhook
     description    : 获取 webhook
     path            : user,project,id
     */

    Depots.prototype.getWebhook = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::getWebhook()");
      return this.get("user/" + user + "/project/" + project + "/git/hook/" + id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : updateWebhook
     description    : 编辑 webhook
     path            : user,project,id
     query            : hook_url,token,type_push,type_mr_pr,type_topic,type_member,type_comment,type_document,type_watch,type_star,type_task
     */

    Depots.prototype.updateWebhook = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::updateWebhook()");
      return this.put("user/" + user + "/project/" + project + "/git/hook/" + id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : deleteWebhook
     description    : 删除 webhook
     path            : user,project,id
     */

    Depots.prototype.deleteWebhook = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::deleteWebhook()");
      return this["delete"]("user/" + user + "/project/" + project + "/git/hook/" + id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : list
     description    : 列出项目设置的 webhook
     path            : user,project
     */

    Depots.prototype.list = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::list()");
      return this.get("user/" + user + "/project/" + project + "/git/hooks", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : importRepo
     description    : 导入仓库
     path            : user,project
     query            : origin_url,vcs_type
     */

    Depots.prototype.importRepo = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::importRepo()");
      return this.get("user/" + user + "/project/" + project + "/git/import", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : importRepo
     description    : 导入仓库
     path            : user,project
     query            : origin_url,vcs_type
     */

    Depots.prototype.importRepo = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::importRepo()");
      return this.post("user/" + user + "/project/" + project + "/git/import", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : initDepot
     description    : 初始化仓库
     path            : user,project
     query            : type,gitReadmeEnabled,gitIgnore,gitLicense,importFrom,vcsType
     */

    Depots.prototype.initDepot = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Depots::initDepot()");
      return this.post("user/" + user + "/project/" + project + "/git/init", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Depots;

  })(BaseModel);

  module.exports = function(client) {
    return new Depots(client);
  };

}).call(this);
