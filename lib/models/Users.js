// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Users, crypto, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  crypto = require('crypto');

  Users = (function(superClass) {
    extend(Users, superClass);

    function Users() {
      this.unreadCount = bind(this.unreadCount, this);
      this.unfollow = bind(this.unfollow, this);
      this.search = bind(this.search, this);
      this.changeNoticeSetting = bind(this.changeNoticeSetting, this);
      this.changeNoticeSetting = bind(this.changeNoticeSetting, this);
      this.relationship = bind(this.relationship, this);
      this.friends = bind(this.friends, this);
      this.friends = bind(this.friends, this);
      this.follower = bind(this.follower, this);
      this.follower = bind(this.follower, this);
      this.follow = bind(this.follow, this);
      this.avatar = bind(this.avatar, this);
      this.updatePwd = bind(this.updatePwd, this);
      this.avatar = bind(this.avatar, this);
      this.phoneRegister = bind(this.phoneRegister, this);
      this.generateRegisterPhoneCode = bind(this.generateRegisterPhoneCode, this);
      this.register = bind(this.register, this);
      this.getUserByName = bind(this.getUserByName, this);
      this.logout = bind(this.logout, this);
      this.loginByPhone = bind(this.loginByPhone, this);
      this.generateLoginPhoneCode = bind(this.generateLoginPhoneCode, this);
      this.login = bind(this.login, this);
      this.getUserByGlobalKey = bind(this.getUserByGlobalKey, this);
      this.gravatar = bind(this.gravatar, this);
      this.changeNoticeSetting = bind(this.changeNoticeSetting, this);
      this.email = bind(this.email, this);
      this.currentUser = bind(this.currentUser, this);
      this.checkTwoFactorAuthCode = bind(this.checkTwoFactorAuthCode, this);
      this.checkPhone = bind(this.checkPhone, this);
      this.checkEmail = bind(this.checkEmail, this);
      this.changeNoticeSetting = bind(this.changeNoticeSetting, this);
      this.captcha = bind(this.captcha, this);
      this.avatar = bind(this.avatar, this);
      this.avatar = bind(this.avatar, this);
      this.activatePhone = bind(this.activatePhone, this);
      this.generateActivatePhoneCode = bind(this.generateActivatePhoneCode, this);
      this.activate = bind(this.activate, this);
      return Users.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method            : post
     summary         : activate
     description    : 账户激活
     query            : email,key,password,confirm_password
     body            : sid
     */

    Users.prototype.activate = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::activate()");
      return this.post("account/activate", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : generateActivatePhoneCode
     description    : 获取激活账号的手机验证码
     query            : phone
     */

    Users.prototype.generateActivatePhoneCode = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::generateActivatePhoneCode()");
      return this.post("account/activate/generate_phone_code", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : activatePhone
     description    : 激活用手机注册的用户
     query            : phone,code,user,email,password
     body            : sid
     */

    Users.prototype.activatePhone = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::activatePhone()");
      return this.post("account/activate/phone", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : avatar
     description    : 获取头像
     */

    Users.prototype.avatar = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::avatar()");
      return this.get("account/avatar", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : avatar
     description    : 上传设置头像
     body            : sid
     */

    Users.prototype.avatar = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::avatar()");
      return this.post("account/avatar", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : captcha
     description    : 检查是否需要验证码
     path            : action
     body            : realRemoteAddress
     */

    Users.prototype.captcha = function(action, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::captcha()");
      return this.get("account/captcha/" + action, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : changeNoticeSetting
     description    : 修改通知设置
     query            : settingType,settingContent
     */

    Users.prototype.changeNoticeSetting = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::changeNoticeSetting()");
      return this.get("account/change_notice_setting", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : checkEmail
     description    : 检查email是否没有被注册过
     query            : key
     */

    Users.prototype.checkEmail = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::checkEmail()");
      return this.get("account/check", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : checkPhone
     description    : 检查手机是否没有被注册过
     query            : phone
     */

    Users.prototype.checkPhone = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::checkPhone()");
      return this.get("account/check/phone", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : checkTwoFactorAuthCode
     description    : 登录时的两步验证
     query            : code
     body            : sid
     */

    Users.prototype.checkTwoFactorAuthCode = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::checkTwoFactorAuthCode()");
      return this.post("account/check_two_factor_auth_code", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : currentUser
     description    : 获取当前登录用户信息
     */

    Users.prototype.currentUser = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::currentUser()");
      return this.get("account/current_user", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : email
     description    : 获取当前用户的email
     */

    Users.prototype.email = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::email()");
      return this.get("account/email", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : changeNoticeSetting
     description    : 获取通知设置
     */

    Users.prototype.changeNoticeSetting = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::changeNoticeSetting()");
      return this.get("account/get_notice_settings", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : gravatar
     description    : 获取Gravatar头像
     */

    Users.prototype.gravatar = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::gravatar()");
      return this.get("account/gravatar", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : getUserByGlobalKey
     description    : 通过个性后缀获取用户信息
     path            : user
     */

    Users.prototype.getUserByGlobalKey = function(user, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::getUserByGlobalKey()");
      return this.get("account/key/" + user, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : login
     description    : 登录
     query            : email,password,j_captcha,remember_me
     body            : sid,realRemoteAddress
     */

    Users.prototype.login = function(params, fn) {
      var sha1;
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::login()");
      sha1 = crypto.createHash('sha1');
      sha1.update(params.password);
      params.password = sha1.digest('hex');
      return this.post("account/login", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : generateLoginPhoneCode
     description    : 获取登录的手机验证码
     query            : phone
     */

    Users.prototype.generateLoginPhoneCode = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::generateLoginPhoneCode()");
      return this.post("account/login/generate_phone_code", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : loginByPhone
     description    : 使用绑定过的手机号码登录
     query            : phone,code,j_captcha,remember_me
     body            : realRemoteAddress
     */

    Users.prototype.loginByPhone = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::loginByPhone()");
      return this.post("account/login/phone", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : logout
     description    : 注销登录
     body            : sid
     */

    Users.prototype.logout = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::logout()");
      return this.post("account/logout", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : getUserByName
     description    : 通过昵称获取用户信息
     path            : name
     */

    Users.prototype.getUserByName = function(name, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::getUserByName()");
      return this.get("account/name/" + name, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : register
     description    : 注册
     query            : email,user,j_captcha
     body            : realRemoteAddress
     */

    Users.prototype.register = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::register()");
      return this.post("account/register", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : generateRegisterPhoneCode
     description    : 获取注册的手机验证码
     query            : phone
     */

    Users.prototype.generateRegisterPhoneCode = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::generateRegisterPhoneCode()");
      return this.post("account/register/generate_phone_code", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : phoneRegister
     description    : 使用手机注册
     query            : phone,code
     body            : realRemoteAddress
     */

    Users.prototype.phoneRegister = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::phoneRegister()");
      return this.post("account/register/phone", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : avatar
     description    : 更新用户信息
     query            : tags,name,sex,phone,birthday,location,company,slogan,introduction,job,code
     body            : sid
     */

    Users.prototype.avatar = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::avatar()");
      return this.post("account/update_info", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : updatePwd
     description    : 修改用户密码
     query            : current_password,password,confirm_password
     body            : sid
     */

    Users.prototype.updatePwd = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::updatePwd()");
      return this.post("account/update_pwd", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : avatar
     description    : 更新头像
     query            : avatar
     body            : sid
     */

    Users.prototype.avatar = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::avatar()");
      return this.post("account/updateavatar", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : follow
     description    : 关注用户
     query            : users
     */

    Users.prototype.follow = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::follow()");
      return this.post("social/follow", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : follower
     description    : 关注我的用户
     query            : page,pageSize
     */

    Users.prototype.follower = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::follower()");
      return this.get("social/followers", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : follower
     description    : 获取关注默认的用户
     path            : user
     query            : page,pageSize
     */

    Users.prototype.follower = function(user, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::follower()");
      return this.get("social/followers/" + user, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : friends
     description    : 我关注的用户列表
     query            : page,pageSize
     */

    Users.prototype.friends = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::friends()");
      return this.get("social/friends", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : friends
     description    : 指定用户的关注列表
     path            : user
     query            : page,pageSize
     */

    Users.prototype.friends = function(user, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::friends()");
      return this.get("social/friends/" + user, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : relationship
     description    : 是否关注了该用户
     path            : user
     */

    Users.prototype.relationship = function(user, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::relationship()");
      return this.get("social/relationship/" + user, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : changeNoticeSetting
     description    : 获取我关注和关注我的用户列表
     */

    Users.prototype.changeNoticeSetting = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::changeNoticeSetting()");
      return this.get("social/relationships", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : changeNoticeSetting
     description    : 获取我关注和关注我的用户列表包含成员列表
     query            : project_id
     */

    Users.prototype.changeNoticeSetting = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::changeNoticeSetting()");
      return this.get("social/relationships/all", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : search
     description    : 搜索用户
     query            : key,page,pageSize
     */

    Users.prototype.search = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::search()");
      return this.get("social/search", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : unfollow
     description    : 取消关注
     query            : users
     */

    Users.prototype.unfollow = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::unfollow()");
      return this.post("social/unfollow", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : unreadCount
     description    : 未读消息通知
     */

    Users.prototype.unreadCount = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Users::unreadCount()");
      return this.get("social/unread_count", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Users;

  })(BaseModel);

  module.exports = function(client) {
    return new Users(client);
  };

}).call(this);
