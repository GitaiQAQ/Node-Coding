// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Keys, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Keys = (function(superClass) {
    extend(Keys, superClass);

    function Keys() {
      this.webhook = bind(this.webhook, this);
      this.list = bind(this.list, this);
      this.webhook = bind(this.webhook, this);
      this.webhook = bind(this.webhook, this);
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      this.key = bind(this.key, this);
      this.get = bind(this.get, this);
      return Keys.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method            : get
     summary         : get
     description    : 通过KeyId获取个人公钥
     path            : user,keyId
     */

    Keys.prototype.get = function(user, keyId, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Keys::get()");
      return this.get("user/" + user + "/key/" + keyId, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : key
     description    : 删除个人公钥
     path            : user,keyId
     */

    Keys.prototype.key = function(user, keyId, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Keys::key()");
      return this["delete"]("user/" + user + "/key/" + keyId, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : list
     description    : 列出个人公钥
     path            : user
     query            : withIDEKey
     */

    Keys.prototype.list = function(user, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Keys::list()");
      return this.get("user/" + user + "/keys", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : create
     description    : 创建个人公钥
     path            : user
     query            : title,content
     */

    Keys.prototype.create = function(user, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Keys::create()");
      return this.post("user/" + user + "/keys", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : webhook
     description    : 绑定部署公钥
     path            : user,project,id
     */

    Keys.prototype.webhook = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Keys::webhook()");
      return this.post("user/" + user + "/project/" + project + "/git/bind_deploy_key/" + id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : webhook
     description    : 新建部署公钥
     path            : user,project
     query            : title,content
     */

    Keys.prototype.webhook = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Keys::webhook()");
      return this.post("user/" + user + "/project/" + project + "/git/deploy_key", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : list
     description    : 列出部署公钥
     path            : user,project
     */

    Keys.prototype.list = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Keys::list()");
      return this.get("user/" + user + "/project/" + project + "/git/deploy_keys", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : webhook
     description    : 解绑部署公钥
     path            : user,project,id
     */

    Keys.prototype.webhook = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Keys::webhook()");
      return this.post("user/" + user + "/project/" + project + "/git/unbind_deploy_key/" + id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Keys;

  })(BaseModel);

  module.exports = function(client) {
    return new Keys(client);
  };

}).call(this);
