// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Tasks, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Tasks = (function(superClass) {
    extend(Tasks, superClass);

    function Tasks() {
      this.count = bind(this.count, this);
      this.list = bind(this.list, this);
      this.count = bind(this.count, this);
      this.getTaskListByLabel = bind(this.getTaskListByLabel, this);
      this.count = bind(this.count, this);
      this.count = bind(this.count, this);
      this.getTaskListByLabel = bind(this.getTaskListByLabel, this);
      this.watch = bind(this.watch, this);
      this.watch = bind(this.watch, this);
      this.update = bind(this.update, this);
      this.update = bind(this.update, this);
      this.update = bind(this.update, this);
      this.watch = bind(this.watch, this);
      this.watch = bind(this.watch, this);
      this.label = bind(this.label, this);
      this.update = bind(this.update, this);
      this.watch = bind(this.watch, this);
      this.update = bind(this.update, this);
      this.update = bind(this.update, this);
      this.comment = bind(this.comment, this);
      this.createComment = bind(this.createComment, this);
      this.createComment = bind(this.createComment, this);
      this.update = bind(this.update, this);
      this.count = bind(this.count, this);
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      this.del = bind(this.del, this);
      this.create = bind(this.create, this);
      this.create = bind(this.create, this);
      return Tasks.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method            : post
     summary         : create
     description    : 创建任务
     path            : project
     query            : owner_id,priority,deadline,description,content,labels,watchers
     */

    Tasks.prototype.create = function(project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::create()");
      return this.post("project/" + project + "/task", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : create
     description    : 创建任务
     path            : project,id
     query            : parseDescription
     */

    Tasks.prototype.create = function(project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::create()");
      return this.get("project/" + project + "/task/" + id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : del
     description    : 删除任务
     path            : project,id
     */

    Tasks.prototype.del = function(project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::del()");
      return this["delete"]("project/" + project + "/task/" + id, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : list
     description    : 列出某人的任务列表
     path            : project,owner,status
     query            : page,pageSize
     body            : key
     */

    Tasks.prototype.list = function(project, owner, status, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::list()");
      return this.get("project/" + project + "/tasks/user/" + owner + "/" + status, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : create
     description    : 全局任务创建
     */

    Tasks.prototype.create = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::create()");
      return this.get("task/creating", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : count
     description    : 任务统计信息
     path            : user,project
     */

    Tasks.prototype.count = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::count()");
      return this.get("user/" + user + "/project/" + project + "/task/count", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : update
     description    : 修改任务
     path            : user,project,id
     query            : status,priority,id,owner_id,deadline,description,content
     */

    Tasks.prototype.update = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::update()");
      return this.put("user/" + user + "/project/" + project + "/task/" + id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : createComment
     description    : 创建任务评论
     path            : user,project,id
     body            : content
     */

    Tasks.prototype.createComment = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::createComment()");
      return this.post("user/" + user + "/project/" + project + "/task/" + id + "/comment", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : createComment
     description    : 删除任务评论
     path            : user,project,id,commentId
     */

    Tasks.prototype.createComment = function(user, project, id, commentId, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::createComment()");
      return this["delete"]("user/" + user + "/project/" + project + "/task/" + id + "/comment/" + commentId, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : comment
     description    : 获取任务评论
     path            : user,project,id
     query            : page,pageSize
     */

    Tasks.prototype.comment = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::comment()");
      return this.get("user/" + user + "/project/" + project + "/task/" + id + "/comments", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : update
     description    : 修改任务内容
     path            : user,project,id
     query            : content,id
     */

    Tasks.prototype.update = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::update()");
      return this.put("user/" + user + "/project/" + project + "/task/" + id + "/content", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : update
     description    : 修改任务截止日期
     path            : user,project,id
     query            : deadline,id
     */

    Tasks.prototype.update = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::update()");
      return this.put("user/" + user + "/project/" + project + "/task/" + id + "/deadline", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : watch
     description    : 获取任务描述
     path            : user,project,id
     */

    Tasks.prototype.watch = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::watch()");
      return this.get("user/" + user + "/project/" + project + "/task/" + id + "/description", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : update
     description    : 修改任务描述
     path            : user,project,id
     query            : description,id
     */

    Tasks.prototype.update = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::update()");
      return this.put("user/" + user + "/project/" + project + "/task/" + id + "/description", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : label
     description    : 添加任务标签
     path            : user,project,id,labelId
     */

    Tasks.prototype.label = function(user, project, id, labelId, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::label()");
      return this.post("user/" + user + "/project/" + project + "/task/" + id + "/label/" + labelId, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : watch
     description    : 删除任务标签
     path            : user,project,id,labelId
     */

    Tasks.prototype.watch = function(user, project, id, labelId, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::watch()");
      return this["delete"]("user/" + user + "/project/" + project + "/task/" + id + "/label/" + labelId, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : watch
     description    : 批量操作任务标签
     path            : user,project,id
     query            : labelIdStrs
     */

    Tasks.prototype.watch = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::watch()");
      return this.post("user/" + user + "/project/" + project + "/task/" + id + "/labels", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : update
     description    : 修改任务执行者
     path            : user,project,id
     query            : owner_id,id
     */

    Tasks.prototype.update = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::update()");
      return this.put("user/" + user + "/project/" + project + "/task/" + id + "/owner", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : update
     description    : 修改任务优先级
     path            : user,project,id
     query            : priority,id
     */

    Tasks.prototype.update = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::update()");
      return this.put("user/" + user + "/project/" + project + "/task/" + id + "/priority", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : put
     summary         : update
     description    : 修改任务状态
     path            : user,project,id
     query            : status,id
     */

    Tasks.prototype.update = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::update()");
      return this.put("user/" + user + "/project/" + project + "/task/" + id + "/status", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : post
     summary         : watch
     description    : 关注任务
     path            : user,project,id
     */

    Tasks.prototype.watch = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::watch()");
      return this.post("user/" + user + "/project/" + project + "/task/" + id + "/watch", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : delete
     summary         : watch
     description    : 取消任务关注
     path            : user,project,id
     */

    Tasks.prototype.watch = function(user, project, id, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::watch()");
      return this["delete"]("user/" + user + "/project/" + project + "/task/" + id + "/watch", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : getTaskListByLabel
     description    : 关注该任务的用户
     path            : user,project,id
     query            : page,pageSize
     */

    Tasks.prototype.getTaskListByLabel = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::getTaskListByLabel()");
      return this.get("user/" + user + "/project/" + project + "/task/" + id + "/watchers", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : count
     description    :  获取当前用户项目的已完成、正在进行的、关注的数值
     path            : user,project
     */

    Tasks.prototype.count = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::count()");
      return this.get("user/" + user + "/project/" + project + "/tasks/count", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : count
     description    : 统计所有 已完成 和 正在处理 的任务数
     path            : user,project
     */

    Tasks.prototype.count = function(user, project, fn) {
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::count()");
      return this.get("user/" + user + "/project/" + project + "/tasks/count_all", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : getTaskListByLabel
     description    : 查询标签下的任务列表
     path            : user,project,id
     query            : page,pageSize
     body            : user
     */

    Tasks.prototype.getTaskListByLabel = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::getTaskListByLabel()");
      return this.get("user/" + user + "/project/" + project + "/tasks/label/" + id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : count
     description    : 列出当前用户某项目某状态的任务列表
     path            : user,project,status
     query            : page,pageSize
     */

    Tasks.prototype.count = function(user, project, status, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::count()");
      return this.get("user/" + user + "/project/" + project + "/tasks/my/" + status, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : list
     description    : 任务列表
     path            : user,project,status
     query            : page,pageSize
     body            : key
     */

    Tasks.prototype.list = function(user, project, status, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::list()");
      return this.get("user/" + user + "/project/" + project + "/tasks/" + status, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method            : get
     summary         : count
     description    : 当前用户某状态的任务列表
     path            : user,status
     query            : page,pageSize
     */

    Tasks.prototype.count = function(user, status, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Tasks::count()");
      return this.get("user/" + user + "/projects/tasks/all/" + status, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Tasks;

  })(BaseModel);

  module.exports = function(client) {
    return new Tasks(client);
  };

}).call(this);
