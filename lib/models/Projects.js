// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Projects, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Projects = (function(superClass) {
    extend(Projects, superClass);

    function Projects() {
      this.public_projects = bind(this.public_projects, this);
      this.createProject = bind(this.createProject, this);
      this.private_projects = bind(this.private_projects, this);
      this.project_list = bind(this.project_list, this);
      this.watchers = bind(this.watchers, this);
      this.watched = bind(this.watched, this);
      this.watch = bind(this.watch, this);
      this.visitProject = bind(this.visitProject, this);
      this.unwatch = bind(this.unwatch, this);
      this.unstar = bind(this.unstar, this);
      this.stared = bind(this.stared, this);
      this.star = bind(this.star, this);
      this.setProjectIcon = bind(this.setProjectIcon, this);
      this.queryByName = bind(this.queryByName, this);
      this.publicProject = bind(this.publicProject, this);
      this.recommendedList = bind(this.recommendedList, this);
      this.update_1 = bind(this.update_1, this);
      this.getPinProjects = bind(this.getPinProjects, this);
      return Projects.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method		: get
     operationId	: getPinProjects
     description	: 获取常用项目列表
     path			: 
     query		: page(integer),pageSize(integer)
     body			:
     */

    Projects.prototype.getPinProjects = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::getPinProjects()");
      return this.get("account/projects/pin", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: put
     operationId	: update_1
     description	: 更新项目信息
     path			: 
     query		: id(string),name(string),description(string)
     body			:
     */

    Projects.prototype.update_1 = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::update_1()");
      return this.put("project", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: recommendedList
     description	: 推荐项目list
     path			: 
     query		: 
     body			:
     */

    Projects.prototype.recommendedList = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::recommendedList()");
      return this.get("projects/recommended", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: publicProject
     description	: 公有项目列表
     path			: 
     query		: page(integer),pageSize(integer)
     body			:
     */

    Projects.prototype.publicProject = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::publicProject()");
      return this.get("public/all", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: queryByName
     description	: 通过名称查询
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.queryByName = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::queryByName()");
      return this.get(util.format("user/%s/project/%s", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: setProjectIcon
     description	: 设置项目图标
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.setProjectIcon = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::setProjectIcon()");
      return this.post(util.format("user/%s/project/%s/project_icon", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: star
     description	: 收藏项目
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.star = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::star()");
      return this.post(util.format("user/%s/project/%s/star", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: stared
     description	: 项目是否被收藏
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.stared = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::stared()");
      return this.post(util.format("user/%s/project/%s/stared", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: unstar
     description	: 项目取消收藏
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.unstar = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::unstar()");
      return this.post(util.format("user/%s/project/%s/unstar", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: unwatch
     description	: 项目取消关注
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.unwatch = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::unwatch()");
      return this.post(util.format("user/%s/project/%s/unwatch", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: visitProject
     description	: 更新项目阅读时间
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.visitProject = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::visitProject()");
      return this.get(util.format("user/%s/project/%s/update_visit", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: watch
     description	: 关注项目
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.watch = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::watch()");
      return this.post(util.format("user/%s/project/%s/watch", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: watched
     description	: 项目是否被关注
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.watched = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::watched()");
      return this.post(util.format("user/%s/project/%s/watched", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: watchers
     description	: 项目关注者
     path			: user,project
     query		: 
     body			:
     */

    Projects.prototype.watchers = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::watchers()");
      return this.get(util.format("user/%s/project/%s/watchers", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: project_list
     description	: 我的项目列表
     path			: 
     query		: type(string),sort(string),page(integer),pageSize(integer)
     body			:
     */

    Projects.prototype.project_list = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::project_list()");
      return this.get("user/projects", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: private_projects
     description	: 私有项目列表
     path			: 
     query		: type(string),page(integer),pageSize(integer)
     body			:
     */

    Projects.prototype.private_projects = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::private_projects()");
      return this.get("user/projects/private", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: createProject
     description	: 创建项目
     path			: global_key
     query		: 
     body			:
     */

    Projects.prototype.createProject = function(global_key, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::createProject()");
      return this.post(util.format("user/%s/project", global_key), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: public_projects
     description	: 公有项目列表
     path			: global_key
     query		: type(string),page(integer),pageSize(integer)
     body			:
     */

    Projects.prototype.public_projects = function(global_key, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::public_projects()");
      return this.get(util.format("user/%s/projects/public", global_key), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Projects;

  })(BaseModel);

  module.exports = function(client) {
    return new Projects(client);
  };

}).call(this);
