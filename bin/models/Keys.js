// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Keys, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Keys = (function(superClass) {
    extend(Keys, superClass);

    function Keys() {
      return Keys.__super__.constructor.apply(this, arguments);
    }

    return Keys;

  })(BaseModel);

  ({

    /*
    
     method			: get
     summary 		: get
     description	: 通过KeyId获取个人公钥
     path			: user,keyId
     */
    get: (function(_this) {
      return function(user, keyId, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Keys::get()");
        return _this.get("user/" + user + "/key/" + keyId, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: delete
     summary 		: key
     description	: 删除个人公钥
     path			: user,keyId
     */
    key: (function(_this) {
      return function(user, keyId, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Keys::key()");
        return _this["delete"]("user/" + user + "/key/" + keyId, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: list
     description	: 列出个人公钥
     path			: user
     query			: withIDEKey
     */
    list: (function(_this) {
      return function(user, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Keys::list()");
        return _this.get("user/" + user + "/keys", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: create
     description	: 创建个人公钥
     path			: user
     query			: title,content
     */
    create: (function(_this) {
      return function(user, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Keys::create()");
        return _this.post("user/" + user + "/keys", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: webhook
     description	: 绑定部署公钥
     path			: user,project,id
     */
    webhook: (function(_this) {
      return function(user, project, id, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Keys::webhook()");
        return _this.post("user/" + user + "/project/" + project + "/git/bind_deploy_key/" + id, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: webhook
     description	: 新建部署公钥
     path			: user,project
     query			: title,content
     */
    webhook: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Keys::webhook()");
        return _this.post("user/" + user + "/project/" + project + "/git/deploy_key", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: list
     description	: 列出部署公钥
     path			: user,project
     */
    list: (function(_this) {
      return function(user, project, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Keys::list()");
        return _this.get("user/" + user + "/project/" + project + "/git/deploy_keys", function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: webhook
     description	: 解绑部署公钥
     path			: user,project,id
     */
    webhook: (function(_this) {
      return function(user, project, id, fn) {
        if (fn == null) {
          fn = null;
        }
        _this.debug("Keys::webhook()");
        return _this.post("user/" + user + "/project/" + project + "/git/unbind_deploy_key/" + id, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this)
  });

  module.exports = function(client) {
    return new Keys(client);
  };

}).call(this);
