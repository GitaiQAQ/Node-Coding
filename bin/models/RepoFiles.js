// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, RepoFiles, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  RepoFiles = (function(superClass) {
    extend(RepoFiles, superClass);

    function RepoFiles() {
      return RepoFiles.__super__.constructor.apply(this, arguments);
    }

    return RepoFiles;

  })(BaseModel);

  ({

    /*
    
     method			: get
     summary 		: del
     description	: 删除文件
     path			: user,project,file
     body			: ref,path
     */
    del: (function(_this) {
      return function(user, project, file, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("RepoFiles::del()");
        return _this.get("user/" + user + "/project/" + project + "/git/delete/" + file, params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: update
     description	: 更新文件
     path			: user,project,file
     body			: ref,path
     */
    update: (function(_this) {
      return function(user, project, file, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("RepoFiles::update()");
        return _this.get("user/" + user + "/project/" + project + "/git/edit/" + file, params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: create
     description	: 新建文件
     path			: user,project,file
     body			: ref,path
     */
    create: (function(_this) {
      return function(user, project, file, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("RepoFiles::create()");
        return _this.get("user/" + user + "/project/" + project + "/git/new/" + file, params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this)
  });

  module.exports = function(client) {
    return new RepoFiles(client);
  };

}).call(this);
