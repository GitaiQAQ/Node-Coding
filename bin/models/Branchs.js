// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Branchs, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Branchs = (function(superClass) {
    extend(Branchs, superClass);

    function Branchs() {
      return Branchs.__super__.constructor.apply(this, arguments);
    }

    return Branchs;

  })(BaseModel);

  ({

    /*
    
     method			: post
     summary 		: default
     description	: 设置默认分支
     path			: user,project
     query			: branch_name
     */
    "default": (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Branchs::default()");
        return _this.post("user/" + user + "/project/" + project + "/git/branch/default", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: listBranches
     description	: 分页显示分支列表
     path			: user,project
     query			: page,pageSize
     */
    listBranches: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Branchs::listBranches()");
        return _this.get("user/" + user + "/project/" + project + "/git/branches", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: create
     description	: 新建分支
     path			: user,project
     query			: branch_name,start_point
     */
    create: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Branchs::create()");
        return _this.post("user/" + user + "/project/" + project + "/git/branches/create", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: del
     description	: 删除分支
     path			: user,project
     query			: branch_name
     */
    del: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Branchs::del()");
        return _this.post("user/" + user + "/project/" + project + "/git/branches/delete", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: addMember
     description	: 添加保护分支成员
     path			: user,project
     query			: branch_name,target_global_key
     */
    addMember: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Branchs::addMember()");
        return _this.post("user/" + user + "/project/" + project + "/git/branches/protected_branch/add_member", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: protectedBranch
     description	: 取消保护分支
     path			: user,project
     query			: branch_name
     */
    protectedBranch: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Branchs::protectedBranch()");
        return _this.post("user/" + user + "/project/" + project + "/git/branches/protected_branch/disable", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: protectedBranch
     description	: 设置保护分支
     path			: user,project
     query			: branch_name
     */
    protectedBranch: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Branchs::protectedBranch()");
        return _this.post("user/" + user + "/project/" + project + "/git/branches/protected_branch/enable", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: get
     summary 		: members
     description	: 列出保护分支中的成员
     path			: user,project
     query			: branch_name
     */
    members: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Branchs::members()");
        return _this.get("user/" + user + "/project/" + project + "/git/branches/protected_branch/members", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this),

    /*
    
     method			: post
     summary 		: deleteMember
     description	: 删除保护分支成员
     path			: user,project
     query			: branch_name,target_global_key
     */
    deleteMember: (function(_this) {
      return function(user, project, params, fn) {
        if (params == null) {
          params = {};
        }
        if (fn == null) {
          fn = null;
        }
        _this.debug("Branchs::deleteMember()");
        return _this.post("user/" + user + "/project/" + project + "/git/branches/protected_branch/remove_member", params, function(data) {
          if (fn) {
            return fn(data);
          }
        });
      };
    })(this)
  });

  module.exports = function(client) {
    return new Branchs(client);
  };

}).call(this);
