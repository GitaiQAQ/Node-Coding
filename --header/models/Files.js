// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Files, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  util = require('util');

  Files = (function(superClass) {
    extend(Files, superClass);

    function Files() {
      this.allFolderFileCount = bind(this.allFolderFileCount, this);
      this.listAllFolder = bind(this.listAllFolder, this);
      this.listFolder = bind(this.listFolder, this);
      this.listFile = bind(this.listFile, this);
      this.renameFolder = bind(this.renameFolder, this);
      this.move = bind(this.move, this);
      this.mkdir = bind(this.mkdir, this);
      this.listFileHistory = bind(this.listFileHistory, this);
      this.createFile = bind(this.createFile, this);
      this.updateFileHistoryRemark = bind(this.updateFileHistoryRemark, this);
      this.imagePreview = bind(this.imagePreview, this);
      this.viewFile = bind(this.viewFile, this);
      this.editFile = bind(this.editFile, this);
      this.downloadURL = bind(this.downloadURL, this);
      this.downloadFile = bind(this.downloadFile, this);
      this.uploadFile = bind(this.uploadFile, this);
      this.downloadHistory = bind(this.downloadHistory, this);
      this.deleteFileHistory = bind(this.deleteFileHistory, this);
      this.deleteFiles = bind(this.deleteFiles, this);
      this.uploadFileHistory = bind(this.uploadFileHistory, this);
      this.checkExisted = bind(this.checkExisted, this);
      return Files.__super__.constructor.apply(this, arguments);
    }


    /*
    
     method		: get
     operationId	: checkExisted
     description	: 检查目录下是否有同名的文件
     path			: user,project,dir
     query		: 
     body			: names(array)
     */

    Files.prototype.checkExisted = function(user, project, dir, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::checkExisted()");
      return this.get(util.format("user/%s/project/%s/dir/%s/files/existed", user, project, dir), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: uploadFileHistory
     description	: 上传文件新版本
     path			: user,project
     query		: 
     body			:
     */

    Files.prototype.uploadFileHistory = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::uploadFileHistory()");
      return this.post(util.format("user/%s/project/%s/file/history/upload", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: delete
     operationId	: deleteFiles
     description	: 删除文件
     path			: user,project
     query		: 
     body			: fileIds(array)
     */

    Files.prototype.deleteFiles = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::deleteFiles()");
      return this["delete"](util.format("user/%s/project/%s/files", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: delete
     operationId	: deleteFileHistory
     description	: 删除文件历史
     path			: user,project,id
     query		: 
     body			:
     */

    Files.prototype.deleteFileHistory = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::deleteFileHistory()");
      return this["delete"](util.format("user/%s/project/%s/files/histories/%s", user, project, id), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: downloadHistory
     description	: 下载历史文件版本
     path			: user,project,id
     query		: 
     body			:
     */

    Files.prototype.downloadHistory = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::downloadHistory()");
      return this.get(util.format("user/%s/project/%s/files/histories/%s/download", user, project, id), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: uploadFile
     description	: 上传私有项目的图片
     path			: user,project
     query		: 
     body			:
     */

    Files.prototype.uploadFile = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::uploadFile()");
      return this.post(util.format("user/%s/project/%s/files/upload", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: downloadFile
     description	: 文件下载
     path			: user,project,fileId
     query		: 
     body			:
     */

    Files.prototype.downloadFile = function(user, project, fileId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::downloadFile()");
      return this.get(util.format("user/%s/project/%s/files/%s/download", user, project, fileId), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: downloadURL
     description	: 文件下载URL
     path			: user,project,fileId
     query		: 
     body			:
     */

    Files.prototype.downloadURL = function(user, project, fileId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::downloadURL()");
      return this.get(util.format("user/%s/project/%s/files/%s/download/url", user, project, fileId), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: editFile
     description	: 编辑文件
     path			: user,project,fileId
     query		: name(string),content(string),fileId(integer)
     body			:
     */

    Files.prototype.editFile = function(user, project, fileId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::editFile()");
      return this.post(util.format("user/%s/project/%s/files/%s/edit", user, project, fileId), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: viewFile
     description	: 查看文件
     path			: user,project,fileId
     query		: type(integer),width(integer),height(integer),flag(integer)
     body			:
     */

    Files.prototype.viewFile = function(user, project, fileId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::viewFile()");
      return this.get(util.format("user/%s/project/%s/files/%s/view", user, project, fileId), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: imagePreview
     description	: 图片预览
     path			: user,project,fileId
     query		: type(integer),width(integer),height(integer)
     body			:
     */

    Files.prototype.imagePreview = function(user, project, fileId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::imagePreview()");
      return this.get(util.format("user/%s/project/%s/files/%s/view/image", user, project, fileId), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: updateFileHistoryRemark
     description	: 修改历史版本备注
     path			: user,project,file_id,history_id
     query		: remark(string)
     body			:
     */

    Files.prototype.updateFileHistoryRemark = function(user, project, file_id, history_id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::updateFileHistoryRemark()");
      return this.post(util.format("user/%s/project/%s/files/%s/histories/%s/remark", user, project, file_id, history_id), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: createFile
     description	: 创建文件
     path			: user,project,folderId
     query		: projectFile.deleted_at(string),projectFile.projects_id(integer),projectFile.files_id(integer),projectFile.comments(integer),projectFile.id(integer),folder.owner_id(integer),folder.parent_id(integer),folder.created_at(ref),folder.updated_at(ref),folder.type(integer),folder.size(integer),folder.name(string),folder.storage_type(string),folder.storage_key(string),folder.history_id(integer),folder.id(integer),name(string),content(string),folderId(integer)
     body			:
     */

    Files.prototype.createFile = function(user, project, folderId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::createFile()");
      return this.post(util.format("user/%s/project/%s/files/%s/files", user, project, folderId), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: listFileHistory
     description	: 文件历史
     path			: user,project,id
     query		: type(integer),width(integer),height(integer)
     body			:
     */

    Files.prototype.listFileHistory = function(user, project, id, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::listFileHistory()");
      return this.get(util.format("user/%s/project/%s/files/%s/histories", user, project, id), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: post
     operationId	: mkdir
     description	: 创建文件夹
     path			: user,project
     query		: name(string),parentId(string)
     body			:
     */

    Files.prototype.mkdir = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::mkdir()");
      return this.post(util.format("user/%s/project/%s/folder", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: put
     operationId	: move
     description	: 移动文件
     path			: user,project,dirId
     query		: fileId(ref)
     body			:
     */

    Files.prototype.move = function(user, project, dirId, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::move()");
      return this.put(util.format("user/%s/project/%s/folder/%s/move", user, project, dirId), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: put
     operationId	: renameFolder
     description	: 重命名文件夹
     path			: user,project,dir
     query		: name(string)
     body			:
     */

    Files.prototype.renameFolder = function(user, project, dir, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::renameFolder()");
      return this.put(util.format("user/%s/project/%s/folder/%s", user, project, dir), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: listFile
     description	: 列出某目录下的文件
     path			: user,project,dir
     query		: type(integer),width(integer),height(integer),page(integer),pageSize(integer)
     body			:
     */

    Files.prototype.listFile = function(user, project, dir, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::listFile()");
      return this.get(util.format("user/%s/project/%s/folder/%s/files", user, project, dir), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: listFolder
     description	: 列出所有一级目录
     path			: user,project
     query		: page(integer),pageSize(integer)
     body			:
     */

    Files.prototype.listFolder = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::listFolder()");
      return this.get(util.format("user/%s/project/%s/folders", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: listAllFolder
     description	: 列出所有目录
     path			: user,project
     query		: page(integer),pageSize(integer)
     body			:
     */

    Files.prototype.listAllFolder = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::listAllFolder()");
      return this.get(util.format("user/%s/project/%s/folders/all", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };


    /*
    
     method		: get
     operationId	: allFolderFileCount
     description	: 获取文件夹的文件数
     path			: user,project
     query		: 
     body			:
     */

    Files.prototype.allFolderFileCount = function(user, project, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Files::allFolderFileCount()");
      return this.get(util.format("user/%s/project/%s/folders/file_count/all", user, project), params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Files;

  })(BaseModel);

  module.exports = function(client) {
    return new Files(client);
  };

}).call(this);
